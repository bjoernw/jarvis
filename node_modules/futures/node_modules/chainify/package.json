{
  "name": "chainify",
  "version": "2.1.2",
  "description": "The chainify module of FuturesJS (Ender.JS and Node.JS)",
  "homepage": "https://github.com/coolaj86/futures",
  "keywords": [
    "flow-control",
    "async",
    "asynchronous",
    "futures",
    "chainify",
    "chain",
    "step",
    "util",
    "browser"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/coolaj86/futures.git"
  },
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "http://coolaj86.info"
  },
  "main": "chainify.js",
  "directories": {
    "lib": "."
  },
  "dependencies": {
    "future": "2.x",
    "sequence": "2.x"
  },
  "engines": {
    "node": "*",
    "ender": ">= 0.5.0"
  },
  "readme": "chainify()\n----\n\nCreates an asynchronous model using asynchronous method queueing.\n\n**Core**\n\n  * `Futures.chainify(providers, modifiers, consumers, context)` - creates an asynchronous model\n    * `providers` - methods which provide data - must return Futures or Joins or undefined\n      * `function (next, params)` must call `next`\n\n    * `modifiers` - methods which use provided data and modify it - act as Sequences\n      * `function (next, err, data [, ...])` must call `next`\n\n    * `consumers` - methods which use data without modifying it - act as simple callbacks\n      * `function (err, data [, ...])`\n\nNote: `next` is an instance of `Futures.deliver`\n\n**Example:**\n\nLet's say we want to produce a model which acts like this:\n\n    Contacts.all({httpAuth: base64(\"coolaj86:secret\")}).limit(30).render();\n\nThe code to produce such a model might look like this:\n\n    var Contacts,\n      providers,\n      modifiers,\n      consumers;\n\n    // Get resources from various sites\n    providers = {\n      facebook: function (next, params) {\n        var future = Futures.future();\n        // make async calls to get data\n\n        // probably best to handle errors\n        // and not pass them on\n        next(data);\n      },\n      twitter: function (next, params) {\n        // same as above\n      },\n      all: function (next, params) {\n        var join = Futures.join();\n        join.add([\n          providers.FacebookContacts(params),\n          providers.TwitterContacts(params)\n        ]);\n        join.when(next);\n      }\n    };\n\n    modifiers = {\n      limit: function(next, data, params) {\n        data = data.first(params);\n        next(data);\n      }\n    };\n\n    consumers = {\n      render: function (data, params) {\n        Template.render(data, params);\n      }\n    };\n\n    Contacts = Futures.chainify(providers, modifiers, consumers);\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/coolaj86/futures/issues"
  },
  "_id": "chainify@2.1.2",
  "dist": {
    "shasum": "4d0fe621c122c83feecba6c8f7d99d11e87bc981"
  },
  "_from": "chainify@2.x",
  "_resolved": "https://registry.npmjs.org/chainify/-/chainify-2.1.2.tgz"
}
