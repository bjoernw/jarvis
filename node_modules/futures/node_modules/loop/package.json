{
  "name": "loop",
  "version": "2.1.2",
  "description": "The promise / subscribe / deferred module of FuturesJS (Ender.JS and Node.JS)",
  "homepage": "https://github.com/coolaj86/futures",
  "keywords": [
    "flow-control",
    "async",
    "asynchronous",
    "futures",
    "loop",
    "util",
    "browser"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/coolaj86/futures.git"
  },
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "http://coolaj86.info"
  },
  "main": "loop.js",
  "directories": {
    "lib": "."
  },
  "dependencies": {
    "future": "2.x"
  },
  "engines": {
    "node": "*",
    "ender": ">= 0.5.0"
  },
  "readme": "loop()\n----\n\nCreates a \"safe\" asynchronous loop.\n\n**core**\n\n  * `Futures.loop(context=null)` - creates a loop object\n  * `run(function (next), seed [, ...])` - Start the loop\n    * `next = function (err, data [, ...]) {}`\n      * `next(\"break\")` will break the loop\n    * `seed` - the data to start with\n\n  * `setTimeout(ms)` - Kill the loop if it runs for `ms`\n  * `setMaxLoop(count)` - Kill the loop if it continues `count+1` times\n  * `setWait(ms)` - Wait at least `ms` before looping again (Browser minimum is 4ms, even if 0 is set)\n\nNote: In a browser each loop will be at least 4ms apart.\n\n**Example:**\n\n    var loop = Futures.loop();\n\n    loop.setTimeout(1000);\n    loop.setMaxLoop(20);\n\n    loop.run(function (next, err, data) {\n      if (data == 4) {\n        next(\"break\");\n      }\n      data += 1;\n      next(undefined, data);\n    }, 0);\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/coolaj86/futures/issues"
  },
  "_id": "loop@2.1.2",
  "dist": {
    "shasum": "85ab46e639921ab264bfe41286ea5ce51a873dd3"
  },
  "_from": "loop@2.x",
  "_resolved": "https://registry.npmjs.org/loop/-/loop-2.1.2.tgz"
}
